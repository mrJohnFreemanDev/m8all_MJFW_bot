import logging
import random
import os
import time
import subprocess
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from gtts import gTTS

# Load token
load_dotenv("all.env")
TOKEN = os.getenv("BOT_TOKEN")

# Logging config
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
for noisy_logger in ["httpx", "apscheduler", "telegram", "telegram.ext", "telegram.request"]:
    logging.getLogger(noisy_logger).setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

# –û—Ç–≤–µ—Ç—ã
RESPONSES_EN = [
    "üòä It is certain.", "‚ú® It is decidedly so.", "üëç Without a doubt.",
    "‚úÖ Yes ‚Äì definitely.", "üëç You may rely on it.", "üòä As I see it, yes.",
    "‚úÖ Most likely.", "‚ú® Outlook good.", "üòä Yes.", "üîÆ Signs point to yes.",
    "ü§î Reply hazy, try again.", "üï∞Ô∏è Ask again later.", "ü§ê Better not tell you now.",
    "üåÄ Cannot predict now.", "üîÑ Concentrate and ask again.",
    "üö´ Don‚Äôt count on it.", "üôÖ My reply is no.", "üòû My sources say no.",
    "‚ùå Outlook not so good.", "üòê Very doubtful."
]

RESPONSES_RU = [
    "üòä –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π.", "‚ú® –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞.", "üëç –ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ.",
    "‚úÖ –î–∞ ‚Äì –∞–±—Å–æ–ª—é—Ç–Ω–æ.", "üëç –ú–æ–∂–µ—à—å –Ω–∞ —ç—Ç–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è.", "üòä –ö–∞–∫ —è –≤–∏–∂—É ‚Äî –¥–∞.",
    "‚úÖ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ.", "‚ú® –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ.", "üòä –î–∞.", "üîÆ –ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî –¥–∞.",
    "ü§î –û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", "üï∞Ô∏è –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ.", "ü§ê –õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å.",
    "üåÄ –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.", "üîÑ –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞.",
    "üö´ –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ.", "üôÖ –ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî –Ω–µ—Ç.", "üòû –ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî –Ω–µ—Ç.",
    "‚ùå –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å.", "üòê –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ."
]

user_timestamps = {}

def get_language(update: Update) -> str:
    lang_code = (update.effective_user.language_code or "en").lower()
    return "ru" if lang_code.startswith("ru") else "en"

def get_keyboard(lang: str):
    if lang == "ru":
        buttons = [["üîÆ –°–ø—Ä–æ—Å–∏—Ç—å –®–∞—Ä –°—É–¥—å–±—ã", "‚ÑπÔ∏è –û –ë–æ—Ç–µ", "‚ùî –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"]]
    else:
        buttons = [["üîÆ Ask the Magic Ball", "‚ÑπÔ∏è About", "‚ùî How It Works"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_language(update)
    keyboard = get_keyboard(lang)
    text = (
        "üé± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Magic 8 Ball by MJFW*!\n"
        "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª, –∏ —è –ø—Ä–µ–¥—Å–∫–∞–∂—É —Ç–≤–æ—é —Å—É–¥—å–±—É."
        if lang == "ru" else
        "üé± Welcome to *Magic 8 Ball by MJFW*!\n"
        "Ask me a yes-or-no question, and I will reveal your fate."
    )
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=keyboard)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_language(update)
    text = (
        "üîÆ –≠—Ç–æ—Ç –±–æ—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —à–∞—Ä —Å—É–¥—å–±—ã ‚Äî Magic 8 Ball.\n"
        "–°–æ–∑–¥–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π: *Ivan Mudriakov / MJFW*"
        if lang == "ru" else
        "üîÆ This bot simulates the classic fortune-telling toy ‚Äî Magic 8 Ball.\n"
        "Created with care by *Ivan Mudriakov / MJFW*"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_language(update)
    text = (
        "‚ùî –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: *–°–µ–≥–æ–¥–Ω—è –ø–æ–π–¥–µ—Ç –¥–æ–∂–¥—å?*"
        if lang == "ru" else
        "‚ùî Just ask a yes-or-no question.\n"
        "Example: *Will it rain today?*"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        lang = get_language(update)
        message = update.message.text.strip()
        user_id = update.effective_user.id
        username = update.effective_user.first_name

        if message in ["üîÆ –°–ø—Ä–æ—Å–∏—Ç—å –®–∞—Ä –°—É–¥—å–±—ã", "üîÆ Ask the Magic Ball"]:
            await start(update, context)
            return
        elif message in ["‚ÑπÔ∏è –û –ë–æ—Ç–µ", "‚ÑπÔ∏è About"]:
            await about(update, context)
            return
        elif message in ["‚ùî –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "‚ùî How It Works"]:
            await how_to_use(update, context)
            return

        now = time.time()
        if now - user_timestamps.get(user_id, 0) < 10:
            await update.message.reply_text(
                "‚è± –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º." if lang == "ru"
                else "‚è± Please wait a bit before asking again.")
            return
        user_timestamps[user_id] = now

        if "?" not in message:
            await update.message.reply_text(
                "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º." if lang == "ru"
                else "‚ùì Please ask a *yes or no* question ending with a question mark.",
                parse_mode="Markdown")
            return

        answer = random.choice(RESPONSES_RU if lang == "ru" else RESPONSES_EN)
        logger.info(f"[{username} | {user_id}] asked: {message} ‚Üí Answer: {answer}")

        # –ü–∞–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤
        voice_dir = Path("voices")
        voice_dir.mkdir(exist_ok=True)

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        mp3_path = voice_dir / f"voice_{user_id}.mp3"
        ogg_path = voice_dir / f"voice_{user_id}.ogg"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –±–µ–∑ —ç–º–æ–¥–∑–∏
        tts_text = ''.join(char for char in answer if char.isalnum() or char.isspace())
        tts = gTTS(text=tts_text, lang=lang)
        tts.save(str(mp3_path))

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        subprocess.run([
            "ffmpeg", "-y",
            "-i", str(mp3_path),
            "-ar", "24000",
            "-ac", "1",
            "-c:a", "libopus",
            str(ogg_path)
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        with open(ogg_path, "rb") as voice:
            await update.message.reply_voice(voice)

        await update.message.reply_text(f"üé± {answer}")

        # –£–¥–∞–ª—è–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
        mp3_path.unlink(missing_ok=True)
        ogg_path.unlink(missing_ok=True)

    except Exception as e:
        logger.error(f"Error: {e}")

async def ignore_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Only text questions are supported.")

def main():
    if not TOKEN:
        logger.error("BOT_TOKEN missing!")
        return

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("howtouse", how_to_use))

    app.add_handler(MessageHandler(
        filters.ATTACHMENT |
        filters.VIDEO |
        filters.PHOTO |
        filters.AUDIO |
        filters.VOICE |
        filters.VIDEO_NOTE |
        filters.Sticker.ALL |
        filters.Document.ALL,
        ignore_content
    ))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
